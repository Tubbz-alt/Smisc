% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream_editing.R
\name{sed_insert}
\alias{sed_comment}
\alias{sed_insert}
\alias{sed_replace}
\alias{sed_substitute}
\alias{streamEdit}
\title{Convenient sed-like stream editing functions}
\usage{
sed_insert(stream, after, insertion, silent = TRUE, ...)
sed_replace(stream, at, replacement, silent = TRUE, ...)
sed_substitute(stream, pattern, replacement, every = TRUE, silent = TRUE, ...)
sed_comment(stream, at, add = TRUE, type = c("R", "C", "Java", "html", "tex", "SAS"),
            silent = TRUE, ...)
streamEdit(commandList, stream = NULL, inFile = NULL, outFile = NULL, silent = TRUE)
}
\arguments{
\item{stream}{A character vector, each element typically (but not necessarily) containing the text
from a single line in a file.}

\item{after}{An integer or character string that designates where \code{insertion} is added to \code{stream}.
If \code{after} is numeric, it designates the line (or element) number in \code{stream} after which the
\code{insertion} will be placed. The numeric value of \code{after} must be in \code{[0:length(stream)]}.
To make an insertion at the very beginning of \code{stream}, use \code{after = 0}.  If \code{after} is a
character string, the insertion is placed after the first element in \code{stream} that contains the string,
where matching is obtained using \code{\link{grep}}.}

\item{insertion}{A character vector that will be inserted into the stream after element \code{after}.
Each element in the vector could correspond to a separate line.}

\item{silent}{A logical that, when \code{TRUE}, instructs the \code{sed} functions to simply return the
\code{stream} if the \code{pattern} is not matched in the \code{stream}.  If \code{silent = FALSE}, a message
is printed when a match for \code{pattern} is not found in the \code{stream}.}

\item{at}{An vector of integers or a character string that designates where \code{replacement}
is placed in \code{stream}.  If \code{at} is numeric, it designates the lines (or elements) in \code{stream}
that will be replaced with \code{replacement}.  The numeric value(s) of \code{at} must be in
\code{[1:length(stream)]}. If \code{at} is a
character string, the lines in \code{stream} that contain the string \code{at} are replaced with
\code{replacement}.  For \code{sed_comment}, the corresponding lines are commented or uncommented.}

\item{replacement}{A character string of length 1 (vectors not supported), that will be inserted
to either entirely replace the line (using \code{sed_replace}) or that will be substituted (using
\code{sed_substitute}).  For \code{sed_replace} only, if  \code{replacement = NULL}, the entire line
is deleted.  For \code{sed_substitute}, setting \code{replace = ""} will remove the characters matched
to \code{pattern}.}

\item{pattern}{A character string containing the regular expression that will be used to identify
which the elements (or lines) in \code{stream} that will be substituted using \code{sed_substitute}.}

\item{every}{A logical indicating whether every instance of \code{pattern} in a single line should be
substituted with \code{replacement}, in which case \code{\link{gsub}} is used.
If \code{every = FALSE}, only the first instance of \code{pattern} is substituted, in which case
\code{\link{sub}} is used.}

\item{add}{A logical indicating whether comments are added to a single
line (\code{TRUE}), or removed (\code{FALSE}). For \code{sed_comment}, note that comment symbols are
added/removed to/from a single line at a time, i.e. not across multiple lines.  When comments are added,
the comment symbols are placed at the beginning and end of the selected lines.  When comments are removed,
the first instances of the beginning and ending symbols are removed from the selected lines.}

\item{type}{A character string indicating the type of comment characters that will be added (or removed).
Alternatively, if a character vector of length 2 is provided, \code{type[1]} designates the beginning
comment character and \code{type[2]} designates the ending comment character.}

\item{commandList}{A list that designates the insertion, replacement, substitution, or commenting commands
that will
be performed on \code{stream}.  The list must have names corresponding to unique abbreviations of
"insert", "replace", "substitute", and/or "comment".  Each element in \code{commandList} must also be
a list with
names and values that correspond to the arguments of \code{sed_insert}, \code{sed_replace},
\code{sed_substitute}, and/or \code{sed_comment} respectively.  See example below.}

\item{inFile}{A character string designating a file that is to be read (using \code{link{readLines}}
and will become a \code{stream},
where each line of the file is mapped to a single element in the character vector \code{stream}.
In \code{streamEdit}, one (and only one) of \code{inFile} or \code{stream} must be specified.}

\item{outFile}{A character string designating a file that the resulting, edited stream will be
written to using \code{\link{writeLines}}.}

\item{\dots}{For \code{sed_insert}, \code{sed_replace}, and \code{sed_comment} these are additional
named arguments to
\code{\link{grep}}, which are applicable if \code{after} or \code{at} is a character string.
For \code{sed_substitute}, these are additional named arguments to \code{\link{grepl}} and
\code{\link{gsub}} or \code{\link{sub}}.}
}
\value{
\itemize{
\item Functions with the \code{sed} prefix return the edited character vector stream.
\item \code{streamEdit} invisibly returns the edited stream, and writes the stream to a file if
\code{outFile} is supplied.
}
}
\description{
Convenient sed-like stream editing functions to insert, substitute, delete, or comment strings (or lines)
in a file.  The functions prefixed by \code{sed} are the main 'worker' functions for
inserting one (or more) new lines, replacing an entire line that matches a string, substituting
one string with another, or commenting/uncommenting lines throughout the stream.
\code{streamEdit} is a general wrapper function that can
be used to execute any number of sequential insertion, replacement, substitution, or commenting steps.
}
\details{
Note that entire
elements (i.e. lines) in \code{stream} can be removed using the \code{sed_replace} and setting
\code{replacement} to \code{NULL}.

If \code{inFile} and \code{outFile} are the same, a backup copy of \code{inFile} is made by attaching
"~" to the end of the filename, e.g., if the original file were \file{aFile.txt}, the backup would be
\file{aFile.txt~}.

The value of \code{silent} in \code{streamEdit} is passed to the worker functions (\code{sed_insert},
\code{sed_replace}, and \code{sed_substitute}) unless the \code{silent} argument is specified for a
command in \code{commandList}, in which case, for that particular command, the locally supplied value
of \code{silent} takes precedence.
}
\examples{
################################################################################
# Let's create an example stream we can edit
################################################################################

cat("Here's a line\\n",
   "Here's a line we'll delete\\n",
   "Line after which we'll insert a string\\n",
   "Filler line\\n",
   "A line after which we'll insert another string\\n",
   "A line where we'll make a substitution\\n",
   "A line where we'll delete 'this'\\n",
   "A line we'll delete\\n",
   "A line we'll entirely replace\\n",
   "The last line\\n",
   sep = "", file = "tmpTest_streamEdit.txt")

# Show the file
more("tmpTest_streamEdit.txt")

# Read the file into a 'stream'
stream <- readLines("tmpTest_streamEdit.txt")

# Insert a string using line numbers
stream <- sed_insert(stream, after = 3, "Here's the first insertion")
stream

# Insert a stream by searching
print(stream <- sed_insert(stream,
                         c("Here's the second insertion",
                           "Another line of the second insertion"),
                          after = "insert another"))

# Here's a deletion of lines 1 and 2 using line numbers
print(stream <- sed_replace(stream, 1:2, NULL))

# Here's a line deletion using a search string
print(stream <- sed_replace(stream, "A line we'll delete", NULL))

# Here's a line replacement
print(stream <- sed_replace(stream, "entirely", "A replacement for the line"))

# Here's a deletion within the line
print(stream <- sed_substitute(stream, " 'this'", ""))

# Here's a substitution of text
print(stream <- sed_substitute(stream, "substitution", "correction"))

# And commenting the last line
print(stream <- sed_comment(stream, "last", type = "html"))

# Uncommenting it
print(stream <- sed_comment(stream, "last", add = FALSE, type = "html"))

# Custom commenting on the last line
print(stream <- sed_comment(stream, "last", type = c("&& ", " *;")))

################################################################################
# Now let's apply the same changes all at once using streamEdit()
################################################################################

stream1 <- streamEdit(list(i = list(after = 3, insertion = "Here's the first insertion"),
                          i = list(after = "insert another",
                                   insertion = c("Here's the second insertion",
                                                 "Another line of the second insertion")),
                          r = list(at = 1:2, replacement = NULL, silent = FALSE),
                          r = list(at = "A line we'll delete", replacement = NULL),
                          r = list(at = "entirely", replacement = "A replacement for the line"),
                          s = list(pattern = " 'this'", replacement = "", silent = FALSE),
                          s = list(pattern = "substitution", replacement = "correction"),
                          c = list(at = "last", type = "html"),
                          c = list(at = "last", add = FALSE, type = "html"),
                          c = list(at = "last", type = c("&& ", " *;"))),
                      inFile = "tmpTest_streamEdit.txt")

# Compare the results
identical(stream, stream1)

# Remove the file
unlink("tmpTest_streamEdit.txt")

################################################################################
# Some additional examples for sed_comment
################################################################################

aStream <- c("Here's a line to comment",
            "# A line to uncomment",
            "  <!-- Another commented line --> ",
            "And some comments * embedded in the line ;")

# Comment the first line in C style
sed_comment(aStream, "to comment", type = "C")

# Comment the first line with a custom style
print(a <- sed_comment(aStream, "to comment", type = c("&&", "##")))

# Remove the R comment from the 2nd line
print(a <- sed_comment(a, "to un", add = FALSE, type = "R"))

# Remove the html comments
print(a <- sed_comment(a, "Another", add = FALSE, type = "html"))

# Remove the SAS comments
sed_comment(a, "embedded", add = FALSE, type = "SAS")

# Comment every line in Java style
print(b <- sed_comment(aStream, "comment", type = "Java"))

# Remove the Java comments from the second and fourth lines
sed_comment(b, c(2, 4), add = FALSE, type = "Java")
}
\author{
Landon Sego
}
\seealso{
\code{\link{grep}}, \code{\link{sub}}, \code{\link{gsub}}, \code{\link{readLines}},
\code{\link{writeLines}}
}
\keyword{misc}

