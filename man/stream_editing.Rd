% Generated by roxygen2 (4.0.1): do not edit by hand
\name{sed_insert}
\alias{sed_insert}
\alias{sed_replace}
\alias{sed_substitute}
\alias{streamEdit}
\title{Convenient sed-like stream editing functions}
\usage{
sed_insert(stream, after, insertion, silent = TRUE, ...)
sed_replace(stream, at, replacement, silent = TRUE, ...)
sed_substitute(stream, pattern, replacement, silent = TRUE, ...)
streamEdit(commandList, stream = NULL, inFile = NULL, outFile = NULL, silent = TRUE)
}
\arguments{
\item{stream}{A character vector, each element typically (but not necessarily) containing the text
from a single line in a file.}

\item{insertion}{A character vector that will be inserted after element \code{after} into the
\code{stream}}

\item{after}{An integer or character string that designates where \code{insertion} is added to \code{stream}.
If \code{after} is numeric, it designates the line (or element) number in \code{stream} after which the
\code{insertion} will be placed. The numeric value of \code{after} must be in  \code{[0:length(stream)]}.
To make an insertion at the very beginning of \code{stream}, use \code{after = 0}.  If \code{after} is a
character string, the insertion is placed after the first element in \code{stream} that contains the string,
where matching is obtained using \code{\link{grep}}.}

\item{at}{An vector of integers or a character string that designates  where \code{replacement} is placed in
\code{stream}.  If \code{at} is numeric, it designates the lines (or elements) in \code{stream}
that will be replaced with \code{replacement}.  The numeric value(s) of \code{at} must be in
\code{[1:length(stream)]}. If \code{at} is a
character string, the lines in \code{stream} that contain the string \code{at} are replaced with
\code{replacement}.}

\item{replacement}{A character string of length 1, vectors not (yet) supported, that will be inserted to
to either entirely replace the line (using \code{sed_replace}) or that will be substituted (using
\code{sed_substitute}).  For \code{sed_replace} only, if  \code{replacement = NULL}, the entire line
is deleted.  For \code{sed_substitute}, setting \code{replace = ""} will remove the characters matched
to \code{pattern}.}

\item{pattern}{A character string containing the regular expression that will be used to identify
which the elements (or lines) in \code{stream} that will be substituted using \code{sed_substitute}.}

\item{commandList}{A list that designates the insertion, replacement, or substitution commands that will
be performed on \code{stream}.  The list must have names corresponding to unique abbreviations of
"insert", "replace", and/or "substitute".  Each element in \code{commandList} must also be a list with
names and values that correspond to the arguments of \code{sed_insert}, \code{sed_replace},
and/or \code{sed_substitute}, respectively.  See example below.}

\item{inFile}{A character string designating a file that is to be read (using \code{link{readLines}}
and will become a \code{stream},
where each line of the file is mapped to a single element in the character vector \code{stream}.
In code{streamEdit}, one (and only one) of \code{inFile} or \code{stream} must be specified.}

\item{outFile}{A character string designating a file that the resulting, edited stream will be
written to using \code{\link{writeLines}}.}

\item{silent}{A logical that, when \code{TRUE}, instructs the \code{sed} functions to simply return the
\code{stream} if the \code{pattern} is not matched in the \code{stream}.  If \code{silent = FALSE}, a message
is printed when a match for \code{pattern} is not found in the \code{stream}.}

\item{\dots}{For \code{sed_insert} and \code{sed_replace}, these are additional named arguments to
\code{\link{grep}}, which are applicable if \code{after} or \code{at} is a character string.
For \code{sed_substitute}, these are additional named arguments to \code{\link{grepl}} and \code{\link{gsub}}.}
}
\value{
Functions with the \code{sed} prefix return the edited character vector stream. \code{streamEdit}
invisibly returns the edited stream, and writes the stream to a file if \code{outFile} is supplied.
}
\description{
Convenient sed-like stream editing functions: insert, substitute, or delete strings (or lines) from a file
}
\details{
The functions prefixed by \code{sed} are the main 'worker' functions for
inserting one (or more) new lines, replacing an entire line that matches a string, or substituting
one string with another throughout the stream.  \code{streamEdit} is a general wrapper function that can
be used to execute any number of sequential insertion, replacement, or substitution steps. Note that entire
elements (i.e. lines) in \code{stream} can be removed using the \code{sed_replace} and setting
\code{replacement} to \code{NULL}.

If \code{inFile} and \code{outFile} are the same, a backup copy of \code{inFile} is made by attaching
"~" to the end of the filename, e.g., if the original file were \file{aFile.txt}, the backup would be
\file{aFile.txt~}.

The value of \code{silent} in \code{streamEdit} is passed to the worker functions (\code{sed_insert},
\code{sed_replace}, and \code{sed_substitute}) unless the \code{silent} argument is specified for a
command in \code{commandList}, in which case, for that particular command, the locally supplied value
of \code{silent} takes precedence.
}
\examples{
# Let's create an example stream we can edit
cat("Here's a line\\n",
   "Here's a line we'll delete\\n",
   "Line after which we'll insert a string\\n",
   "Filler line\\n",
   "A line after which we'll insert another string\\n",
   "A line where we'll make a substitution\\n",
   "A line where we'll delete 'this'\\n",
   "A line we'll delete\\n",
   "A line we'll entirely replace\\n",
   "The last line\\n",
   sep = "", file = "tmpTest_streamEdit.txt")

# Show the file
more("tmpTest_streamEdit.txt")

# Read the file into a 'stream'
stream <- readLines("tmpTest_streamEdit.txt")

# Insert a string using line numbers
stream <- sed_insert(stream, after = 3, "Here's the first insertion")
stream

# Insert a stream by searching
stream <- sed_insert(stream, c("Here's the second insertion", "Another line of the second insertion"),
                    after = "insert another")
stream

# Here's a deletion of lines 1 and 2 using line numbers
stream <- sed_replace(stream, 1:2, NULL)
stream

# Here's a line deletion using a search string
stream <- sed_replace(stream, "A line we'll delete", NULL)
stream

# Here's a line replacement
stream <- sed_replace(stream, "entirely", "A replacement for the line")
stream

# Here's a deletion within the line
stream <- sed_substitute(stream, " 'this'", "")
stream

# Here's a substitution of text
stream <- sed_substitute(stream, "substitution", "correction")
stream

# Now let's apply the same changes all at once using streamEdit()
stream1 <- streamEdit(list(i = list(after = 3, insertion = "Here's the first insertion"),
                          i = list(after = "insert another",
                                   insertion = c("Here's the second insertion",
                                                 "Another line of the second insertion")),
                          r = list(at = 1:2, replacement = NULL, silent = FALSE),
                          r = list(at = "A line we'll delete", replacement = NULL),
                          r = list(at = "entirely", replacement = "A replacement for the line"),
                          s = list(pattern = " 'this'", replacement = "", silent = FALSE),
                          s = list(pattern = "substitution", replacement = "correction")),
                     inFile = "tmpTest_streamEdit.txt")

# Compare the results
identical(stream, stream1)

# Remove the file
unlink("tmpTest_streamEdit.txt")
}
\author{
Landon Sego
}
\seealso{
\code{\link{grep}}, \code{\link{gsub}}, \code{\link{readLines}}, \code{\link{writeLines}}
}
\keyword{misc}

