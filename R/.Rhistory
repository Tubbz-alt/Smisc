rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
rbinom(2, 100, c(0.01, 0.99))
q()
n
example(smartFilter)
library(Smisc)
example(smartFilter)
x
filter(x, c(1, 2))
smartFilter(x, c(1, 2))
filter(x, 1:3)
smartFilter(x, 1:3)
smartFilter(x, 1:3) * 6
smartFilter(x, 1:3 / 6)
filter(x, 1:3 / 6)
smartFilter(x, 3:1 / 6)
smartFilter(x, wts)
smartFilter(x, 3:1 / 6)
filter(x, 1:3 / 6)
example(smartFilter)
x <- rnorm(50)

smooth_x <- movAvg2(x, bw = 2, type = "e")

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x"))
points(1:50, smooth_x, type = "b", col = "Blue")

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x")
points(1:50, smooth_x, type = "b", col = "Blue")

smooth_x <- movAvg2(x, bw = 5, type = "e")

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x")
points(1:50, smooth_x, type = "b", col = "Blue")

x <- rnorm(50)

smooth_x <- movAvg2(x, bw = 5, type = "e")

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x")
lines(1:50, smooth_x, col = "Blue", lwd = 3)

out <- movAvg2(x, bw = 5, type = "e", plot = TRUE)

movAvg2(bw = 5, type = "e", plot = TRUE)
movAvg2(bw = 5, type = "g", plot = TRUE)
movAvg2(bw = 5, type = "g", plot = TRUE)
movAvg2(bw = 5, type = "e", plot = TRUE)
movAvg2(bw = 5, type = "u", plot = TRUE)
movAvg2(bw = 5, type = "l", plot = TRUE)
x <- rnorm(50)

smooth_x <- movAvg2(x, bw = 5, type = "g")

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x")
lines(1:50, smooth_x, col = "Blue", lwd = 3)

movAvg2(bw = 5, type = "g", plot = TRUE)

plot(1:50, x, type = "b", col = "Black", xlab = "Index", ylab = "x")
lines(1:50, smooth_x, col = "Blue", lwd = 3)
example(timeDiff)
q()
n
library(Smisc)
example(timeDiff)
rma()
ls()
data(timeDiff.eg)[1:2]
ls()
timeDiff.eg
timeDiff.eg[1:2]
with(timeDiff.eg, timeDiff(x1, x2, full = TRUE))
with(timeDiff.eg, timeDiff(x1,d, x2,d, full = TRUE))
with(timeDiff.eg, timeDiff(x1,d, x2,d, full = TRUE))
with(timeDiff.eg, timeDiff(x1,d, x2.d, full = TRUE))
with(timeDiff.eg, timeDiff(x1.d, x2.d, full = TRUE))
with(timeDiff.eg, timeDiff(x1, x2, full = TRUE))
lengths(timeDiff.eg)
example(timeIntegration)
example(timeIntegration)
q*(
)
q()
n
library(Smisc)
example(timeIntegration)
data(PowerData)
)
int1
int2
int2 <- timeIntegration(PowerData, check.plot = TRUE, units = "m")
q()
n
?polygon
example(polygon)
?segments
example(segments)
q()
n
library(Smisc)
example(timeIntegration)
q()
n
library(Smisc)
int2 <- timeIntegration(PowerData, check.plot = TRUE, units = "m")
q()
n
library(Smisc)
example(timeIntegration)
q) <- 
q()
n
library(Smisc)
example(timeIntegration)

q()
n
library(Smisc)
example(timeIntegration)
args(plot.defaultA)
args(plot.default)
q()
n
library(Smis)
library(Smisc)
example(timeIntegration)
q) <- 
q()
n
library(Smisc)
example(timeIntegration)
q()
n
library(Smisc)
example(timeIntegration)
q()
n
example(timeIntegration)
library(Smisc)
example(timeIntegration)
library(Smisc)
example(timeIntegration)
q()
n
